diff --git a/src/main/resources/openapi.yaml b/src/main/resources/openapi.yaml
index e5c7b4bc..2b6e40f3 100644
--- a/src/main/resources/openapi.yaml
+++ b/src/main/resources/openapi.yaml
@@ -1,64 +1,50 @@
-openapi: 3.0.2
-servers:
-  - url: /v3
+openapi: 3.0.4
 info:
+  title: Swagger Petstore - OpenAPI 3.0
   description: |-
     This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
-    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
+    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
     You can now help us improve the API whether it's by making changes to the definition itself or to the code.
     That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
 
     Some useful links:
     - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
     - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
-  version: 1.0.22-SNAPSHOT
-  title: Swagger Petstore - OpenAPI 3.0
-  termsOfService: 'http://swagger.io/terms/'
+  termsOfService: https://swagger.io/terms/
   contact:
     email: apiteam@swagger.io
   license:
     name: Apache 2.0
-    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
+    url: https://www.apache.org/licenses/LICENSE-2.0.html
+  version: 1.0.22-SNAPSHOT
+externalDocs:
+  description: Find out more about Swagger
+  url: https://swagger.io
+servers:
+  - url: https://petstore3.swagger.io/api/v3
 tags:
   - name: pet
     description: Everything about your Pets
     externalDocs:
       description: Find out more
-      url: 'http://swagger.io'
+      url: https://swagger.io
   - name: store
     description: Access to Petstore orders
     externalDocs:
       description: Find out more about our store
-      url: 'http://swagger.io'
+      url: https://swagger.io
   - name: user
     description: Operations about user
 paths:
   /pet:
-    post:
+    put:
       tags:
         - pet
-      summary: Add a new pet to the store
-      description: Add a new pet to the store
-      operationId: addPet
-      responses:
-        '200':
-          description: Successful operation
-          content:
-            application/xml:
-              schema:
-                $ref: '#/components/schemas/Pet'
-            application/json:
-              schema:
-                $ref: '#/components/schemas/Pet'
-        '405':
-          description: Invalid input
-      security:
-        - petstore_auth:
-            - 'write:pets'
-            - 'read:pets'
+      summary: Update an existing pet.
+      description: Update an existing pet by Id.
+      operationId: updatePet
       requestBody:
-        description: Create a new pet in the store
-        required: true
+        description: Update an existent pet in the store
         content:
           application/json:
             schema:
@@ -69,35 +55,37 @@ paths:
           application/x-www-form-urlencoded:
             schema:
               $ref: '#/components/schemas/Pet'
-    put:
-      tags:
-        - pet
-      summary: Update an existing pet
-      description: Update an existing pet by Id
-      operationId: updatePet
+        required: true
       responses:
         '200':
           description: Successful operation
           content:
-            application/xml:
+            application/json:
               schema:
                 $ref: '#/components/schemas/Pet'
-            application/json:
+            application/xml:
               schema:
                 $ref: '#/components/schemas/Pet'
         '400':
           description: Invalid ID supplied
         '404':
           description: Pet not found
-        '405':
+        '422':
           description: Validation exception
+        default:
+          description: Unexpected error
       security:
         - petstore_auth:
-            - 'write:pets'
-            - 'read:pets'
+            - write:pets
+            - read:pets
+    post:
+      tags:
+        - pet
+      summary: Add a new pet to the store.
+      description: Add a new pet to the store.
+      operationId: addPet
       requestBody:
-        description: Update an existent pet in the store
-        required: true
+        description: Create a new pet in the store
         content:
           application/json:
             schema:
@@ -108,12 +96,33 @@ paths:
           application/x-www-form-urlencoded:
             schema:
               $ref: '#/components/schemas/Pet'
+        required: true
+      responses:
+        '200':
+          description: Successful operation
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/Pet'
+            application/xml:
+              schema:
+                $ref: '#/components/schemas/Pet'
+        '400':
+          description: Invalid input
+        '422':
+          description: Validation exception
+        default:
+          description: Unexpected error
+      security:
+        - petstore_auth:
+            - write:pets
+            - read:pets
   /pet/findByStatus:
     get:
       tags:
         - pet
-      summary: Finds Pets by status
-      description: Multiple status values can be provided with comma separated strings
+      summary: Finds Pets by status.
+      description: Multiple status values can be provided with comma separated strings.
       operationId: findPetsByStatus
       parameters:
         - name: status
@@ -123,39 +132,39 @@ paths:
           explode: true
           schema:
             type: string
+            default: available
             enum:
               - available
               - pending
               - sold
-            default: available
       responses:
         '200':
           description: successful operation
           content:
-            application/xml:
+            application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/Pet'
-            application/json:
+            application/xml:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/Pet'
         '400':
           description: Invalid status value
+        default:
+          description: Unexpected error
       security:
         - petstore_auth:
-            - 'write:pets'
-            - 'read:pets'
+            - write:pets
+            - read:pets
   /pet/findByTags:
     get:
       tags:
         - pet
-      summary: Finds Pets by tags
-      description: >-
-        Multiple tags can be provided with comma separated strings. Use tag1,
-        tag2, tag3 for testing.
+      summary: Finds Pets by tags.
+      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
       operationId: findPetsByTags
       parameters:
         - name: tags
@@ -171,28 +180,30 @@ paths:
         '200':
           description: successful operation
           content:
-            application/xml:
+            application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/Pet'
-            application/json:
+            application/xml:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/Pet'
         '400':
           description: Invalid tag value
+        default:
+          description: Unexpected error
       security:
         - petstore_auth:
-            - 'write:pets'
-            - 'read:pets'
-  '/pet/{petId}':
+            - write:pets
+            - read:pets
+  /pet/{petId}:
     get:
       tags:
         - pet
-      summary: Find pet by ID
-      description: Returns a single pet
+      summary: Find pet by ID.
+      description: Returns a single pet.
       operationId: getPetById
       parameters:
         - name: petId
@@ -206,26 +217,28 @@ paths:
         '200':
           description: successful operation
           content:
-            application/xml:
+            application/json:
               schema:
                 $ref: '#/components/schemas/Pet'
-            application/json:
+            application/xml:
               schema:
                 $ref: '#/components/schemas/Pet'
         '400':
           description: Invalid ID supplied
         '404':
           description: Pet not found
+        default:
+          description: Unexpected error
       security:
         - api_key: []
         - petstore_auth:
-            - 'write:pets'
-            - 'read:pets'
+            - write:pets
+            - read:pets
     post:
       tags:
         - pet
-      summary: Updates a pet in the store with form data
-      description: ''
+      summary: Updates a pet in the store with form data.
+      description: Updates a pet resource based on the form data.
       operationId: updatePetWithForm
       parameters:
         - name: petId
@@ -246,17 +259,28 @@ paths:
           schema:
             type: string
       responses:
-        '405':
+        '200':
+          description: successful operation
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/Pet'
+            application/xml:
+              schema:
+                $ref: '#/components/schemas/Pet'        
+        '400':
           description: Invalid input
+        default:
+          description: Unexpected error
       security:
         - petstore_auth:
-            - 'write:pets'
-            - 'read:pets'
+            - write:pets
+            - read:pets
     delete:
       tags:
         - pet
-      summary: Deletes a pet
-      description: ''
+      summary: Deletes a pet.
+      description: Delete a pet.
       operationId: deletePet
       parameters:
         - name: api_key
@@ -273,18 +297,22 @@ paths:
             type: integer
             format: int64
       responses:
+        '200':
+          description: Pet deleted
         '400':
           description: Invalid pet value
+        default:
+          description: Unexpected error
       security:
         - petstore_auth:
-            - 'write:pets'
-            - 'read:pets'
-  '/pet/{petId}/uploadImage':
+            - write:pets
+            - read:pets
+  /pet/{petId}/uploadImage:
     post:
       tags:
         - pet
-      summary: uploads an image
-      description: ''
+      summary: Uploads an image.
+      description: Upload image of the pet.
       operationId: uploadFile
       parameters:
         - name: petId
@@ -300,6 +328,12 @@ paths:
           required: false
           schema:
             type: string
+      requestBody:
+        content:
+          application/octet-stream:
+            schema:
+              type: string
+              format: binary
       responses:
         '200':
           description: successful operation
@@ -307,22 +341,22 @@ paths:
             application/json:
               schema:
                 $ref: '#/components/schemas/ApiResponse'
+        '400':
+          description: No file uploaded
+        '404':
+          description: Pet not found
+        default:
+          description: Unexpected error
       security:
         - petstore_auth:
-            - 'write:pets'
-            - 'read:pets'
-      requestBody:
-        content:
-          application/octet-stream:
-            schema:
-              type: string
-              format: binary
+            - write:pets
+            - read:pets
   /store/inventory:
     get:
       tags:
         - store
-      summary: Returns pet inventories by status
-      description: Returns a map of status codes to quantities
+      summary: Returns pet inventories by status.
+      description: Returns a map of status codes to quantities.
       operationId: getInventory
       x-swagger-router-controller: OrderController
       responses:
@@ -335,25 +369,18 @@ paths:
                 additionalProperties:
                   type: integer
                   format: int32
+        default:
+          description: Unexpected error
       security:
         - api_key: []
   /store/order:
     post:
       tags:
         - store
-      summary: Place an order for a pet
-      description: Place a new order in the store
-      operationId: placeOrder
+      summary: Place an order for a pet.
+      description: Place a new order in the store.
       x-swagger-router-controller: OrderController
-      responses:
-        '200':
-          description: successful operation
-          content:
-            application/json:
-              schema:
-                $ref: '#/components/schemas/Order'
-        '405':
-          description: Invalid input
+      operationId: placeOrder
       requestBody:
         content:
           application/json:
@@ -365,15 +392,26 @@ paths:
           application/x-www-form-urlencoded:
             schema:
               $ref: '#/components/schemas/Order'
-  '/store/order/{orderId}':
+      responses:
+        '200':
+          description: successful operation
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/Order'
+        '400':
+          description: Invalid input
+        '422':
+          description: Validation exception
+        default:
+          description: Unexpected error
+  /store/order/{orderId}:
     get:
       tags:
         - store
-      summary: Find purchase order by ID
+      summary: Find purchase order by ID.
       x-swagger-router-controller: OrderController
-      description: >-
-        For valid response try integer IDs with value <= 5 or > 10. Other values
-        will generate exceptions.
+      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
       operationId: getOrderById
       parameters:
         - name: orderId
@@ -387,24 +425,24 @@ paths:
         '200':
           description: successful operation
           content:
-            application/xml:
+            application/json:
               schema:
                 $ref: '#/components/schemas/Order'
-            application/json:
+            application/xml:
               schema:
                 $ref: '#/components/schemas/Order'
         '400':
           description: Invalid ID supplied
         '404':
           description: Order not found
+        default:
+          description: Unexpected error
     delete:
       tags:
         - store
-      summary: Delete purchase order by ID
+      summary: Delete purchase order by identifier.
+      description: For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
       x-swagger-router-controller: OrderController
-      description: >-
-        For valid response try integer IDs with value < 1000. Anything above
-        1000 or nonintegers will generate API errors
       operationId: deleteOrder
       parameters:
         - name: orderId
@@ -415,28 +453,24 @@ paths:
             type: integer
             format: int64
       responses:
+        '200':
+          description: order deleted
         '400':
           description: Invalid ID supplied
         '404':
           description: Order not found
+        default:
+          description: Unexpected error
   /user:
     post:
       tags:
         - user
-      summary: Create user
+      summary: Create user.
       description: This can only be done by the logged in user.
+      x-swagger-router-controller: UserController
       operationId: createUser
-      responses:
-        default:
-          description: successful operation
-          content:
-            application/json:
-              schema:
-                $ref: '#/components/schemas/User'
-            application/xml:
-              schema:
-                $ref: '#/components/schemas/User'
       requestBody:
+        description: Created user object
         content:
           application/json:
             schema:
@@ -447,40 +481,51 @@ paths:
           application/x-www-form-urlencoded:
             schema:
               $ref: '#/components/schemas/User'
-        description: Created user object
+      responses:
+        '200':
+          description: successful operation
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/User'
+            application/xml:
+              schema:
+                $ref: '#/components/schemas/User'        
+        default:
+          description: Unexpected error
   /user/createWithList:
     post:
       tags:
         - user
-      summary: Creates list of users with given input array
-      description: 'Creates list of users with given input array'
+      summary: Creates list of users with given input array.
+      description: Creates list of users with given input array.
       x-swagger-router-controller: UserController
       operationId: createUsersWithListInput
+      requestBody:
+        content:
+          application/json:
+            schema:
+              type: array
+              items:
+                $ref: '#/components/schemas/User'
       responses:
         '200':
           description: Successful operation
           content:
-            application/xml:
+            application/json:
               schema:
                 $ref: '#/components/schemas/User'
-            application/json:
+            application/xml:
               schema:
                 $ref: '#/components/schemas/User'
         default:
-          description: successful operation
-      requestBody:
-        content:
-          application/json:
-            schema:
-              type: array
-              items:
-                $ref: '#/components/schemas/User'
+          description: Unexpected error
   /user/login:
     get:
       tags:
         - user
-      summary: Logs user into the system
-      description: ''
+      summary: Logs user into the system.
+      description: Log into the system.
       operationId: loginUser
       parameters:
         - name: username
@@ -518,28 +563,32 @@ paths:
                 type: string
         '400':
           description: Invalid username/password supplied
+        default:
+          description: Unexpected error
   /user/logout:
     get:
       tags:
         - user
-      summary: Logs out current logged in user session
-      description: ''
+      summary: Logs out current logged in user session.
+      description: Log user out of the system.
       operationId: logoutUser
       parameters: []
       responses:
-        default:
+        '200':
           description: successful operation
-  '/user/{username}':
+        default:
+          description: Unexpected error
+  /user/{username}:
     get:
       tags:
         - user
-      summary: Get user by user name
-      description: ''
+      summary: Get user by user name.
+      description: Get user detail based on username.
       operationId: getUserByName
       parameters:
         - name: username
           in: path
-          description: 'The name that needs to be fetched. Use user1 for testing. '
+          description: The name that needs to be fetched. Use user1 for testing
           required: true
           schema:
             type: string
@@ -547,33 +596,32 @@ paths:
         '200':
           description: successful operation
           content:
-            application/xml:
+            application/json:
               schema:
                 $ref: '#/components/schemas/User'
-            application/json:
+            application/xml:
               schema:
                 $ref: '#/components/schemas/User'
         '400':
           description: Invalid username supplied
         '404':
           description: User not found
+        default:
+          description: Unexpected error
     put:
       tags:
         - user
-      summary: Update user
-      x-swagger-router-controller: UserController
+      summary: Update user resource.
       description: This can only be done by the logged in user.
+      x-swagger-router-controller: UserController
       operationId: updateUser
       parameters:
         - name: username
           in: path
-          description: name that needs to be updated
+          description: name that need to be deleted
           required: true
           schema:
             type: string
-      responses:
-        default:
-          description: successful operation
       requestBody:
         description: Update an existent user in the store
         content:
@@ -586,10 +634,19 @@ paths:
           application/x-www-form-urlencoded:
             schema:
               $ref: '#/components/schemas/User'
+      responses:
+        '200':
+          description: successful operation
+        '400':
+          description: bad request
+        '404':
+          description: user not found
+        default:
+          description: Unexpected error
     delete:
       tags:
         - user
-      summary: Delete user
+      summary: Delete user resource.
       description: This can only be done by the logged in user.
       operationId: deleteUser
       parameters:
@@ -600,17 +657,19 @@ paths:
           schema:
             type: string
       responses:
+        '200':
+          description: User deleted
         '400':
           description: Invalid username supplied
         '404':
           description: User not found
-externalDocs:
-  description: Find out more about Swagger
-  url: 'http://swagger.io'
+        default:
+          description: Unexpected error
 components:
   schemas:
     Order:
       x-swagger-router-model: io.swagger.petstore.model.Order
+      type: object
       properties:
         id:
           type: integer
@@ -630,54 +689,18 @@ components:
         status:
           type: string
           description: Order Status
+          example: approved
           enum:
             - placed
             - approved
             - delivered
-          example: approved
         complete:
           type: boolean
       xml:
         name: order
-      type: object
-    Customer:
-      properties:
-        id:
-          type: integer
-          format: int64
-          example: 100000
-        username:
-          type: string
-          example: fehguy
-        address:
-          type: array
-          items:
-            $ref: '#/components/schemas/Address'
-          xml:
-            wrapped: true
-            name: addresses
-      xml:
-        name: customer
-      type: object
-    Address:
-      properties:
-        street:
-          type: string
-          example: 437 Lytton
-        city:
-          type: string
-          example: Palo Alto
-        state:
-          type: string
-          example: CA
-        zip:
-          type: string
-          example: 94301
-      xml:
-        name: address
-      type: object
     Category:
       x-swagger-router-model: io.swagger.petstore.model.Category
+      type: object
       properties:
         id:
           type: integer
@@ -688,9 +711,9 @@ components:
           example: Dogs
       xml:
         name: category
-      type: object
     User:
       x-swagger-router-model: io.swagger.petstore.model.User
+      type: object
       properties:
         id:
           type: integer
@@ -710,20 +733,20 @@ components:
           example: john@email.com
         password:
           type: string
-          example: 12345
+          example: '12345'
         phone:
           type: string
-          example: 12345
+          example: '12345'
         userStatus:
           type: integer
+          description: User Status
           format: int32
           example: 1
-          description: User Status
       xml:
         name: user
-      type: object
     Tag:
       x-swagger-router-model: io.swagger.petstore.model.Tag
+      type: object
       properties:
         id:
           type: integer
@@ -732,12 +755,12 @@ components:
           type: string
       xml:
         name: tag
-      type: object
     Pet:
       x-swagger-router-model: io.swagger.petstore.model.Pet
       required:
         - name
         - photoUrls
+      type: object
       properties:
         id:
           type: integer
@@ -762,8 +785,6 @@ components:
             wrapped: true
           items:
             $ref: '#/components/schemas/Tag'
-            xml:
-              name: tag
         status:
           type: string
           description: pet status in the store
@@ -773,8 +794,8 @@ components:
             - sold
       xml:
         name: pet
-      type: object
     ApiResponse:
+      type: object
       properties:
         code:
           type: integer
@@ -785,9 +806,9 @@ components:
           type: string
       xml:
         name: '##default'
-      type: object
   requestBodies:
     Pet:
+      description: Pet object that needs to be added to the store
       content:
         application/json:
           schema:
@@ -795,25 +816,24 @@ components:
         application/xml:
           schema:
             $ref: '#/components/schemas/Pet'
-      description: Pet object that needs to be added to the store
     UserArray:
+      description: List of user object
       content:
         application/json:
           schema:
             type: array
             items:
               $ref: '#/components/schemas/User'
-      description: List of user object
   securitySchemes:
     petstore_auth:
       type: oauth2
       flows:
         implicit:
-          authorizationUrl: 'https://petstore.swagger.io/oauth/authorize'
+          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
           scopes:
-            'write:pets': modify pets in your account
-            'read:pets': read your pets
+            "write:pets": modify pets in your account
+            "read:pets": read your pets
     api_key:
       type: apiKey
       name: api_key
-      in: header
+      in: header
\ No newline at end of file
